{"ast":null,"code":"var _jsxFileName = \"/Users/vorambhavan/fullstack-task/frontend/src/LineChart.js\";\nimport React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nconst LineChart = ({\n  data\n}) => {\n  useEffect(() => {\n    if (data.length === 0) return;\n\n    // Clear previous chart\n    d3.select(\"#line-chart\").selectAll(\"*\").remove();\n\n    // Set chart dimensions\n    const margin = {\n      top: 20,\n      right: 50,\n      bottom: 70,\n      left: 70\n    }; // Increased bottom & left margins\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    // Parse date and sort data by date\n    const parseDate = d3.timeParse(\"%Y-%m-%d\");\n    const formattedData = data.map(d => ({\n      date: parseDate(d.date_of_sale),\n      price: d.price\n    })).sort((a, b) => a.date - b.date);\n\n    // Create scales\n    const x = d3.scaleTime().domain(d3.extent(formattedData, d => d.date)).range([0, width]);\n    const y = d3.scaleLinear().domain([0, d3.max(formattedData, d => d.price)]).nice().range([height, 0]);\n\n    // Create SVG\n    const svg = d3.select(\"#line-chart\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create line generator\n    const line = d3.line().x(d => x(d.date)).y(d => y(d.price)).curve(d3.curveMonotoneX);\n\n    // Append line path\n    svg.append(\"path\").datum(formattedData).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 2).attr(\"d\", line);\n\n    // Modify X-axis for better spacing\n    svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(d3.axisBottom(x).ticks(5).tickFormat(d3.timeFormat(\"%b %Y\"))) // Limit tick count for better readability\n    .selectAll(\"text\").attr(\"transform\", \"rotate(-30)\") // Rotate labels to prevent overlap\n    .style(\"text-anchor\", \"end\").style(\"font-size\", \"12px\"); // Adjust font size\n\n    // Modify Y-axis for better spacing\n    svg.append(\"g\").call(d3.axisLeft(y).ticks(6)) // Reduce number of ticks for better spacing\n    .style(\"font-size\", \"12px\");\n\n    // Add X-axis label\n    svg.append(\"text\").attr(\"transform\", `translate(${width / 2}, ${height + 50})`) // Adjust positioning\n    .style(\"text-anchor\", \"middle\").style(\"font-size\", \"14px\") // Increase font size\n    .text(\"Date of Sale\");\n\n    // Add Y-axis label\n    svg.append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", -margin.left + 15) // Adjust label position\n    .attr(\"x\", -height / 2).style(\"text-anchor\", \"middle\").style(\"font-size\", \"14px\").text(\"Price (USD)\");\n  }, [data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"line-chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 10\n    }\n  });\n};\nexport default LineChart;","map":{"version":3,"names":["React","useEffect","d3","LineChart","data","length","select","selectAll","remove","margin","top","right","bottom","left","width","height","parseDate","timeParse","formattedData","map","d","date","date_of_sale","price","sort","a","b","x","scaleTime","domain","extent","range","y","scaleLinear","max","nice","svg","append","attr","line","curve","curveMonotoneX","datum","call","axisBottom","ticks","tickFormat","timeFormat","style","axisLeft","text","createElement","id","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/vorambhavan/fullstack-task/frontend/src/LineChart.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nconst LineChart = ({ data }) => {\n  useEffect(() => {\n    if (data.length === 0) return;\n\n    // Clear previous chart\n    d3.select(\"#line-chart\").selectAll(\"*\").remove();\n\n    // Set chart dimensions\n    const margin = { top: 20, right: 50, bottom: 70, left: 70 }; // Increased bottom & left margins\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    // Parse date and sort data by date\n    const parseDate = d3.timeParse(\"%Y-%m-%d\");\n    const formattedData = data.map(d => ({\n      date: parseDate(d.date_of_sale),\n      price: d.price\n    })).sort((a, b) => a.date - b.date);\n\n    // Create scales\n    const x = d3.scaleTime()\n      .domain(d3.extent(formattedData, d => d.date))\n      .range([0, width]);\n\n    const y = d3.scaleLinear()\n      .domain([0, d3.max(formattedData, d => d.price)])\n      .nice()\n      .range([height, 0]);\n\n    // Create SVG\n    const svg = d3.select(\"#line-chart\")\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Create line generator\n    const line = d3.line()\n      .x(d => x(d.date))\n      .y(d => y(d.price))\n      .curve(d3.curveMonotoneX);\n\n    // Append line path\n    svg.append(\"path\")\n      .datum(formattedData)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"d\", line);\n\n    // Modify X-axis for better spacing\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(d3.axisBottom(x).ticks(5).tickFormat(d3.timeFormat(\"%b %Y\"))) // Limit tick count for better readability\n      .selectAll(\"text\")\n      .attr(\"transform\", \"rotate(-30)\") // Rotate labels to prevent overlap\n      .style(\"text-anchor\", \"end\")\n      .style(\"font-size\", \"12px\"); // Adjust font size\n\n    // Modify Y-axis for better spacing\n    svg.append(\"g\")\n      .call(d3.axisLeft(y).ticks(6)) // Reduce number of ticks for better spacing\n      .style(\"font-size\", \"12px\");\n\n    // Add X-axis label\n    svg.append(\"text\")\n      .attr(\"transform\", `translate(${width / 2}, ${height + 50})`) // Adjust positioning\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"14px\") // Increase font size\n      .text(\"Date of Sale\");\n\n    // Add Y-axis label\n    svg.append(\"text\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", -margin.left + 15) // Adjust label position\n      .attr(\"x\", -height / 2)\n      .style(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"14px\")\n      .text(\"Price (USD)\");\n\n  }, [data]);\n\n  return <div id=\"line-chart\"></div>;\n};\n\nexport default LineChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}